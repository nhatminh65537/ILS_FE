-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."__EFMigrationsHistory"
(
    migration_id character varying(150) COLLATE pg_catalog."default" NOT NULL,
    product_version character varying(32) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pk___ef_migrations_history PRIMARY KEY (migration_id)
);

CREATE TABLE IF NOT EXISTS public.challenge_categories
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT pk_challenge_categories PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.challenge_files
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    challenge_id integer NOT NULL,
    file_name text COLLATE pg_catalog."default" NOT NULL,
    file_path text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT pk_challenge_files PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.challenge_nodes
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    title text COLLATE pg_catalog."default",
    is_problem boolean NOT NULL DEFAULT false,
    problem_id integer,
    description text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    path text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pk_challenge_nodes PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.challenge_problem_tags
(
    challenge_problem_id integer NOT NULL,
    challenge_tag_id integer NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT pk_challenge_problem_tags PRIMARY KEY (challenge_problem_id, challenge_tag_id)
);

CREATE TABLE IF NOT EXISTS public.challenge_problems
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    title text COLLATE pg_catalog."default" NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    challenge_state_id integer NOT NULL,
    flag text COLLATE pg_catalog."default" NOT NULL,
    category_id integer NOT NULL,
    xp integer NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT pk_challenge_problems PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.challenge_states
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT pk_challenge_states PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.challenge_tags
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT pk_challenge_tags PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.challenge_writeups
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    user_id integer NOT NULL,
    challenge_id integer NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT pk_challenge_writeups PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.external_logins
(
    user_id integer NOT NULL,
    provider text COLLATE pg_catalog."default" NOT NULL,
    provider_user_id text COLLATE pg_catalog."default" NOT NULL,
    provider_data text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT pk_external_logins PRIMARY KEY (user_id, provider)
);

CREATE TABLE IF NOT EXISTS public.learn_categories
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pk_learn_categories PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.learn_lesson_types
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pk_learn_lesson_types PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.learn_lessons
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    title text COLLATE pg_catalog."default" NOT NULL,
    type_id integer NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    xp integer NOT NULL DEFAULT 0,
    duration integer NOT NULL DEFAULT 0,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT pk_learn_lessons PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.learn_lifecycle_states
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pk_learn_lifecycle_states PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.learn_module_tags
(
    module_id integer NOT NULL,
    tag_id integer NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT pk_learn_module_tags PRIMARY KEY (module_id, tag_id)
);

CREATE TABLE IF NOT EXISTS public.learn_modules
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    node_id integer NOT NULL,
    title text COLLATE pg_catalog."default" NOT NULL,
    image_path text COLLATE pg_catalog."default",
    created_by integer,
    description text COLLATE pg_catalog."default" NOT NULL,
    category_id integer NOT NULL,
    lifecycle_state_id integer NOT NULL,
    xp integer NOT NULL DEFAULT 0,
    duration integer NOT NULL DEFAULT 0,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT pk_learn_modules PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.learn_nodes
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    title text COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    is_lesson boolean NOT NULL DEFAULT false,
    lesson_id integer,
    "order" integer NOT NULL DEFAULT 0,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    path text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pk_learn_nodes PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.learn_progress_states
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pk_learn_progress_states PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.learn_tags
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pk_learn_tags PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.permissions
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    CONSTRAINT pk_permissions PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.role_permissions
(
    role_id integer NOT NULL,
    permission_id integer NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT pk_role_permissions PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE IF NOT EXISTS public.roles
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    changeable boolean NOT NULL DEFAULT true,
    CONSTRAINT pk_roles PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.user_challenge_finishes
(
    user_id integer NOT NULL,
    challenge_id integer NOT NULL,
    finished_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT pk_user_challenge_finishes PRIMARY KEY (user_id, challenge_id)
);

CREATE TABLE IF NOT EXISTS public.user_finished_lessons
(
    user_id integer NOT NULL,
    lesson_id integer NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT pk_user_finished_lessons PRIMARY KEY (user_id, lesson_id)
);

CREATE TABLE IF NOT EXISTS public.user_module_progresses
(
    user_id integer NOT NULL,
    module_id integer NOT NULL,
    progress_state_id integer NOT NULL,
    CONSTRAINT pk_user_module_progresses PRIMARY KEY (user_id, module_id)
);

CREATE TABLE IF NOT EXISTS public.user_permissions
(
    user_id integer NOT NULL,
    permission_id integer NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT pk_user_permissions PRIMARY KEY (user_id, permission_id)
);

CREATE TABLE IF NOT EXISTS public.user_profiles
(
    id integer NOT NULL,
    first_name text COLLATE pg_catalog."default",
    last_name text COLLATE pg_catalog."default",
    display_name text COLLATE pg_catalog."default" NOT NULL,
    xp integer NOT NULL DEFAULT 0,
    level integer NOT NULL DEFAULT 1,
    avatar_path text COLLATE pg_catalog."default",
    bio text COLLATE pg_catalog."default",
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT pk_user_profiles PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.user_roles
(
    user_id integer NOT NULL,
    role_id integer NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT pk_user_roles PRIMARY KEY (user_id, role_id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    user_name text COLLATE pg_catalog."default" NOT NULL,
    email text COLLATE pg_catalog."default" NOT NULL,
    email_verified boolean NOT NULL DEFAULT false,
    phone_number text COLLATE pg_catalog."default",
    password_hash text COLLATE pg_catalog."default" NOT NULL,
    require_password_reset boolean NOT NULL DEFAULT false,
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT pk_users PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.challenge_files
    ADD CONSTRAINT fk_challenge_files_challenge_problems_challenge_id FOREIGN KEY (challenge_id)
    REFERENCES public.challenge_problems (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_challenge_files_challenge_id
    ON public.challenge_files(challenge_id);


ALTER TABLE IF EXISTS public.challenge_nodes
    ADD CONSTRAINT fk_challenge_nodes_challenge_problems_problem_id FOREIGN KEY (problem_id)
    REFERENCES public.challenge_problems (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_challenge_nodes_problem_id
    ON public.challenge_nodes(problem_id);


ALTER TABLE IF EXISTS public.challenge_problem_tags
    ADD CONSTRAINT fk_challenge_problem_tags_challenge_problems_challenge_problem FOREIGN KEY (challenge_problem_id)
    REFERENCES public.challenge_problems (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.challenge_problem_tags
    ADD CONSTRAINT fk_challenge_problem_tags_challenge_problems_challenge_tag_id FOREIGN KEY (challenge_tag_id)
    REFERENCES public.challenge_problems (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_challenge_problem_tags_challenge_tag_id
    ON public.challenge_problem_tags(challenge_tag_id);


ALTER TABLE IF EXISTS public.challenge_problem_tags
    ADD CONSTRAINT fk_challenge_problem_tags_challenge_tags_challenge_tag_id FOREIGN KEY (challenge_tag_id)
    REFERENCES public.challenge_tags (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_challenge_problem_tags_challenge_tag_id
    ON public.challenge_problem_tags(challenge_tag_id);


ALTER TABLE IF EXISTS public.challenge_problems
    ADD CONSTRAINT fk_challenge_problems_challenge_categories_category_id FOREIGN KEY (category_id)
    REFERENCES public.challenge_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS ix_challenge_problems_category_id
    ON public.challenge_problems(category_id);


ALTER TABLE IF EXISTS public.challenge_problems
    ADD CONSTRAINT fk_challenge_problems_challenge_states_challenge_state_id FOREIGN KEY (challenge_state_id)
    REFERENCES public.challenge_states (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS ix_challenge_problems_challenge_state_id
    ON public.challenge_problems(challenge_state_id);


ALTER TABLE IF EXISTS public.challenge_writeups
    ADD CONSTRAINT fk_challenge_writeups_challenge_problems_challenge_id FOREIGN KEY (challenge_id)
    REFERENCES public.challenge_problems (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_challenge_writeups_challenge_id
    ON public.challenge_writeups(challenge_id);


ALTER TABLE IF EXISTS public.challenge_writeups
    ADD CONSTRAINT fk_challenge_writeups_users_user_id FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_challenge_writeups_user_id
    ON public.challenge_writeups(user_id);


ALTER TABLE IF EXISTS public.external_logins
    ADD CONSTRAINT fk_external_logins_users_user_id FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.learn_lessons
    ADD CONSTRAINT fk_learn_lessons_learn_lesson_types_type_id FOREIGN KEY (type_id)
    REFERENCES public.learn_lesson_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_learn_lessons_type_id
    ON public.learn_lessons(type_id);


ALTER TABLE IF EXISTS public.learn_module_tags
    ADD CONSTRAINT fk_learn_module_tags_learn_modules_module_id FOREIGN KEY (module_id)
    REFERENCES public.learn_modules (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_learn_module_tags_module_id
    ON public.learn_module_tags(module_id);


ALTER TABLE IF EXISTS public.learn_module_tags
    ADD CONSTRAINT fk_learn_module_tags_learn_tags_tag_id FOREIGN KEY (tag_id)
    REFERENCES public.learn_tags (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_learn_module_tags_tag_id
    ON public.learn_module_tags(tag_id);


ALTER TABLE IF EXISTS public.learn_modules
    ADD CONSTRAINT fk_learn_modules_learn_categories_category_id FOREIGN KEY (category_id)
    REFERENCES public.learn_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS ix_learn_modules_category_id
    ON public.learn_modules(category_id);


ALTER TABLE IF EXISTS public.learn_modules
    ADD CONSTRAINT fk_learn_modules_learn_lifecycle_states_lifecycle_state_id FOREIGN KEY (lifecycle_state_id)
    REFERENCES public.learn_lifecycle_states (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS ix_learn_modules_lifecycle_state_id
    ON public.learn_modules(lifecycle_state_id);


ALTER TABLE IF EXISTS public.learn_modules
    ADD CONSTRAINT fk_learn_modules_learn_nodes_node_id FOREIGN KEY (node_id)
    REFERENCES public.learn_nodes (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_learn_modules_node_id
    ON public.learn_modules(node_id);


ALTER TABLE IF EXISTS public.learn_modules
    ADD CONSTRAINT fk_learn_modules_users_created_by FOREIGN KEY (created_by)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS ix_learn_modules_created_by
    ON public.learn_modules(created_by);


ALTER TABLE IF EXISTS public.learn_nodes
    ADD CONSTRAINT fk_learn_nodes_learn_lessons_lesson_id FOREIGN KEY (lesson_id)
    REFERENCES public.learn_lessons (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_learn_nodes_lesson_id
    ON public.learn_nodes(lesson_id);


ALTER TABLE IF EXISTS public.role_permissions
    ADD CONSTRAINT fk_role_permissions_permissions_permission_id FOREIGN KEY (permission_id)
    REFERENCES public.permissions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_role_permissions_permission_id
    ON public.role_permissions(permission_id);


ALTER TABLE IF EXISTS public.role_permissions
    ADD CONSTRAINT fk_role_permissions_roles_role_id FOREIGN KEY (role_id)
    REFERENCES public.roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_role_permissions_role_id
    ON public.role_permissions(role_id);


ALTER TABLE IF EXISTS public.user_challenge_finishes
    ADD CONSTRAINT fk_user_challenge_finishes_challenge_problems_challenge_id FOREIGN KEY (challenge_id)
    REFERENCES public.challenge_problems (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_user_challenge_finishes_challenge_id
    ON public.user_challenge_finishes(challenge_id);


ALTER TABLE IF EXISTS public.user_challenge_finishes
    ADD CONSTRAINT fk_user_challenge_finishes_users_user_id FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.user_finished_lessons
    ADD CONSTRAINT fk_user_finished_lessons_learn_lessons_lesson_id FOREIGN KEY (lesson_id)
    REFERENCES public.learn_lessons (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_user_finished_lessons_lesson_id
    ON public.user_finished_lessons(lesson_id);


ALTER TABLE IF EXISTS public.user_finished_lessons
    ADD CONSTRAINT fk_user_finished_lessons_users_user_id FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_user_finished_lessons_user_id
    ON public.user_finished_lessons(user_id);


ALTER TABLE IF EXISTS public.user_module_progresses
    ADD CONSTRAINT fk_user_module_progresses_learn_modules_module_id FOREIGN KEY (module_id)
    REFERENCES public.learn_modules (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_user_module_progresses_module_id
    ON public.user_module_progresses(module_id);


ALTER TABLE IF EXISTS public.user_module_progresses
    ADD CONSTRAINT fk_user_module_progresses_learn_progress_states_progress_state FOREIGN KEY (progress_state_id)
    REFERENCES public.learn_progress_states (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_user_module_progresses_progress_state_id
    ON public.user_module_progresses(progress_state_id);


ALTER TABLE IF EXISTS public.user_module_progresses
    ADD CONSTRAINT fk_user_module_progresses_users_user_id FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_user_module_progresses_user_id
    ON public.user_module_progresses(user_id);


ALTER TABLE IF EXISTS public.user_permissions
    ADD CONSTRAINT fk_user_permissions_permissions_permission_id FOREIGN KEY (permission_id)
    REFERENCES public.permissions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_user_permissions_permission_id
    ON public.user_permissions(permission_id);


ALTER TABLE IF EXISTS public.user_permissions
    ADD CONSTRAINT fk_user_permissions_users_user_id FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_user_permissions_user_id
    ON public.user_permissions(user_id);


ALTER TABLE IF EXISTS public.user_profiles
    ADD CONSTRAINT fk_user_profiles_users_id FOREIGN KEY (id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS pk_user_profiles
    ON public.user_profiles(id);


ALTER TABLE IF EXISTS public.user_roles
    ADD CONSTRAINT fk_user_roles_roles_role_id FOREIGN KEY (role_id)
    REFERENCES public.roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_user_roles_role_id
    ON public.user_roles(role_id);


ALTER TABLE IF EXISTS public.user_roles
    ADD CONSTRAINT fk_user_roles_users_user_id FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_user_roles_user_id
    ON public.user_roles(user_id);

END;